@page "/Notifications"
@using Harmonify.Shared.DTO
@using Harmonify.Client.Services.ApplicationUser
@using Harmonify.Client.Services.Notification
@using Harmonify.Shared.Enums
@using Harmonify.Shared.Models
@inject IJSRuntime JsRuntime;
@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Context="Authorize">
    <Authorized>
        <div class="ui segments" style="padding-bottom: 3%;
                                        padding-left: 3%;
                                        padding-right: 3%;">
            <div class="ui segment" style="padding: 1em 0.2em;">
                <h3>Notifications</h3>
            </div>
            @if (MyNotSeenNotifications?.Count > 1)
            {
                <button style="margin-bottom: 1%;" @onclick="async () => await MarkAllNotificationsAsSeen()" class="small circular harmonify-background-color ui button">
                    Mark all as seen
                </button>
            }
            <div class="ui feed">
                @if (loaded)
                {
                    @if (MySeenNotifications?.Count == 0 && MyNotSeenNotifications?.Count == 0)
                    {
                        <div class="ui blue nag">
                            <div class="title">You don't have any notifications yet.</div>
                        </div>
                    }
                    @foreach (var notification in MyNotSeenNotifications)
                    {
                        <div class="event">
                            <div class="label" style="align-self: center !important;">
                                @switch (notification.Type)
                                {
                                    case NotificationType.Friendship:
                                        <i class="user friends icon"></i>
                                        break;
                                    case NotificationType.PostLike:
                                    case NotificationType.CommentLike:
                                        <i class="heart icon"></i>
                                        break;
                                    case NotificationType.Comment:
                                        <i class="comment icon"></i>
                                        break;
                                    case NotificationType.CommentReply:
                                        <i class="reply icon"></i>
                                        break;
                                }
                            </div>
                            <div class="content" style="padding-top: 0 !important;">
                                <div class="date">
                                    <span>@Index.GetDate(notification.ReceivedAt)</span>
                                </div>
                                <a class="summary" @onclick="() => GoToReferenceUrl(notification)">
                                    @notification.Description
                                </a>
                                <div class="meta" style="margin: 0 0 0 0.5rem;">
                                    <a class="like" @onclick="async () => await MarkAsSeen(notification.Id)">
                                        <i class="check square outline icon"></i>Mark as seen
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            @if (MySeenNotifications != null && MySeenNotifications.Count > 0)
            {
                <div class="ui horizontal divider">
                    Already seen
                </div>
            }
            <div class="ui feed">
                @if (loaded)
                {
                    @foreach (var notification in MySeenNotifications)
                    {
                        <div class="event">
                            <div class="label" style="align-self: center !important;">
                                @switch (notification.Type)
                                {
                                    case NotificationType.Friendship:
                                        <i class="user friends icon"></i>
                                        break;
                                    case NotificationType.PostLike:
                                    case NotificationType.CommentLike:
                                        <i class="heart icon"></i>
                                        break;
                                    case NotificationType.Comment:
                                        <i class="comment icon"></i>
                                        break;
                                    case NotificationType.CommentReply:
                                        <i class="reply icon"></i>
                                        break;
                                }
                            </div>
                            <div class="content" style="padding-top: 0 !important;">
                                <div class="date">
                                    <span>@Index.GetDate(notification.ReceivedAt)</span>
                                </div>
                                <a class="summary" href="@notification.ReferenceUrl">
                                    @notification.Description
                                </a>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="my-container">
            <div class="my-sub-container p-2 ">
                <div style="text-align: center;">
                    <h3>Log in, to see your notifications.</h3>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool loaded = false;

    private ApplicationUserDTO User { get; set; }

    private ICollection<Notification>? MySeenNotifications { get; set; }

    private ICollection<Notification>? MyNotSeenNotifications { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    public IApplicationUserService UserService { get; set; }

    [Inject]
    public INotificationService NotificationService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loaded = false;

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();

        if (authState.User.Identity.Name != null)
        {
            User = await UserService
                .GetUserByEmailAsync(authState.User.Identity?.Name);
            var notifications = await NotificationService
                .GetMyNotificationsAsync(User.Id);
            MySeenNotifications = notifications.Where(x => x.MarkedAsSeen).ToArray();
            MyNotSeenNotifications = notifications.Where(x => x.MarkedAsSeen == false).ToArray();

            loaded = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            await JsRuntime.InvokeVoidAsync("openNag");
    }

    private async Task MarkAsSeen(Guid notificationId, bool reload = true)
    {
        var body = new
        {
            NotificationId = notificationId,
            MarkedAsSeen = true
        };

        var entity = await NotificationService.MarkAsSeenAsync(body);

        if (entity == null)
            await JsRuntime.InvokeVoidAsync(
                "alert",
                "Something went wrong, we couldn't mark this notification as seen.");
        else if (reload)
            Navigation.NavigateTo("/Notifications", forceLoad: true);
    }

    private async Task MarkAllNotificationsAsSeen()
    {
        await NotificationService.MarkAllAsSeenAsync(new { UserId = User.Id });

        Navigation.NavigateTo("/Notifications", forceLoad: true);
    }

    private async void GoToReferenceUrl(Notification notification)
    {
        await MarkAsSeen(notification.Id, reload: false);
        Navigation.NavigateTo(notification.ReferenceUrl, forceLoad: true);
    }
}
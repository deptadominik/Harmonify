@using Harmonify.Client.Services.Post
@using Harmonify.Shared.DTO
@using Harmonify.Client.Services.ApplicationUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime;

<form class="ui reply form">
        <div class="field">
            <textarea @oninput="HandleEditOnChange" value="@TextEditAreaValue"></textarea>
        </div>
        <div @onclick="async () => await UpdatePost()"
             class="ui blue labeled submit icon button"
             style="padding-left: 2.5em!important;
                    padding-right: 1em!important;">
            <i class="icon edit"></i>Save harm
        </div>
        <div @onclick="InvokeDiscard"
             class="ui red labeled submit icon button"
             style="padding-left: 2.5em!important;
                    padding-right: 1em!important;">
            <i class="icon window close outline"
               style="color: unset;text-shadow: unset;"></i>Discard
        </div>
        <div class="ui dimmer" id="harm-dimmer">
            <div class="content">
                <h2 class="ui inverted icon header">
                    <i class="check icon"></i>
                    Harm updated!
                </h2>
            </div>
        </div>
    </form>

@code {
    private string TextEditAreaValue { get; set; }

    private ApplicationUserDTO User { get; set; }
    
    [Parameter]
    public bool? IsEditImageInput { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnDiscard { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnPublish { get; set; }

    [Parameter]
    public EventCallback<bool> OnShowEditTextPost { get; set; }
    
    [Parameter]
    public EventCallback<string> OnUpdateHarmTextContent { get; set; }
    
    [Parameter]
    public PostDTO PostBeingEdited { get; set; }
    
    [Parameter]
    public EventCallback<ICollection<PostDTO>> OnMyFeed { get; set; }

    [Inject]
    public IApplicationUserService UserService { get; set; }

    [Inject]
    public IPostService PostService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();

        if (authState.User.Identity.Name != null)
        {
            User = await UserService
                .GetUserByEmailAsync(authState.User.Identity?.Name);
            TextEditAreaValue = PostBeingEdited.Content;
        }
    }

    private void HandleEditOnChange(ChangeEventArgs args)
    {
        TextEditAreaValue = args.Value.ToString();
    }
    
    private async Task UpdatePost()
    {
        if (IsEditImageInput ?? false)
        {
            await OnUpdateHarmTextContent.InvokeAsync(TextEditAreaValue);
            await OnPublish.InvokeAsync(true);
        }
        else if (!string.IsNullOrWhiteSpace(TextEditAreaValue))
        {
            var body = new
            {
                PostId = PostBeingEdited!.Id,
                Content = TextEditAreaValue,
                EditedAt = DateTime.Now
            };

            var entity = await PostService.UpdateAsync(body);

            if (entity == null)
                await JsRuntime.InvokeVoidAsync(
                    "errorToast",
                    "Something went wrong, we couldn't update your harm.");
            else
            {
                await JsRuntime.InvokeVoidAsync("toggleDimmer");
                await OnMyFeed
                    .InvokeAsync(await PostService.GetMyFeedAsync(User.Id));
                await Task.Delay(1000);
                await OnShowEditTextPost.InvokeAsync(false);
            }
        }
        else
            await JsRuntime.InvokeVoidAsync(
                "errorToast",
                "You can't save an empty harm!");
    }
    
    private async void InvokeDiscard()
    {
        if (!IsEditImageInput ?? true)
            await OnShowEditTextPost.InvokeAsync(false);
        else
            await OnDiscard.InvokeAsync(false);
    }
}
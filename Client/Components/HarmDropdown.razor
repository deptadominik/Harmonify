@using Harmonify.Shared.Enums
@using Harmonify.Shared.DTO
@using Harmonify.Client.Services.ApplicationUser
@using Harmonify.Client.Services.CommentService
@using Harmonify.Client.Services.Post
@using Harmonify.Client.Helpers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime;
@inject AzureStorageHelper _ash;

<div class="ui text menu"
     style="display: inline-flex; float: right;
                                 margin-left: 1%; min-height: 0; margin-bottom: 0; margin-top: 0;">
    <div class="ui dropdown item" id="@Id">
        <i class="ellipsis horizontal icon"></i>
        <div class="menu">
            @switch (Type)
            {
                case DropdownType.Post:
                    <div class="item" @onclick="() => ShowEditTextPost(PostBeingEdited)">Edit</div>
                    <div class="item" @onclick="async () => await DeletePost(PostBeingEdited.Id)">Delete</div>
                    break;
                case DropdownType.Image:
                    <div class="item" @onclick="() => ShowEditImagePost(PostBeingEdited)">Edit</div>
                    <div class="item" @onclick="async () => await DeletePost(PostBeingEdited.Id)">Delete</div>
                    break;
                case DropdownType.Comment:
                    <div class="item" @onclick="() => OpenEditCommentSection(Comment)">Edit</div>
                    <div class="item" @onclick="async () => await DeleteComment(Comment.Id)">Delete</div>
                    break;
                case DropdownType.Reply:
                
                    <div class="item" @onclick="() => OpenEditReplySection(Comment)">Edit</div>
                    <div class="item" @onclick="async () => await DeleteComment(Comment.Id)">Delete</div>
                    break;
                case DropdownType.ReplyToReply:
                    <div class="item" @onclick="() => OpenEditReplyToReplySection(Comment)">Edit</div>
                    <div class="item" @onclick="async () => await DeleteComment(Comment.Id)">Delete</div>
                    break;
            }
        </div>
    </div>
</div>

@code {
    private int _totalCommentCount;
    
    [Parameter]
    public ApplicationUserDTO User { get; set; }
    
    [Parameter]
    public string Id { get; set; }
    
    [Parameter]
    public DropdownType Type { get; set; }
    
    [Parameter]
    public PostDTO PostBeingEdited { get; set; }
    
    [Parameter]
    public PostDTO PostBeingCommented { get; set; }
    
    [Parameter]
    public CommentDTO Comment { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnShowTextPost { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnShowImagePost { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnShowEditTextPost { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnShowEditImagePost { get; set; }
    
    [Parameter]
    public EventCallback<PostDTO> OnPostBeingEdited { get; set; }
    
    [Parameter]
    public EventCallback<CommentDTO> OnCommentBeingEdited { get; set; }
    
    [Parameter]
    public EventCallback<CommentDTO> OnReplyBeingEdited { get; set; }
    
    [Parameter]
    public EventCallback<CommentDTO> OnReplyToReplyBeingEdited { get; set; }
    
    [Parameter]
    public EventCallback<ICollection<PostDTO>> OnMyFeed { get; set; }
    
    [Parameter]
    public EventCallback<ICollection<CommentDTO>> OnHarmComments { get; set; }
    
    [Inject]
    public IApplicationUserService UserService { get; set; }
    
    [Inject]
    public ICommentService CommentService { get; set; }

    [Inject]
    public IPostService PostService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
    }
    
    private async void ShowEditTextPost(PostDTO post)
    {
        await OnPostBeingEdited.InvokeAsync(post);
        await OnShowTextPost.InvokeAsync(false);
        await OnShowImagePost.InvokeAsync(false);
        await OnShowEditTextPost.InvokeAsync(true);
        await OnShowEditImagePost.InvokeAsync(false);
    }
    
    private async void ShowEditImagePost(PostDTO post)
    {
        await OnPostBeingEdited.InvokeAsync(post);
        await OnShowTextPost.InvokeAsync(false);
        await OnShowImagePost.InvokeAsync(false);
        await OnShowEditTextPost.InvokeAsync(false);
        await OnShowEditImagePost.InvokeAsync(true);
    }
    
    private async Task DeletePost(Guid postId)
    {
        var wasRemoved = await PostService.DeleteAsync(postId);

        if (!wasRemoved)
            await JsRuntime.InvokeVoidAsync(
                "errorToast",
                "Something went wrong, we couldn't delete this post.");
        else
        {
            foreach (var image in PostBeingEdited.Images)
                await _ash.DeleteImageFromAzure(image.Name);
            
            await JsRuntime.InvokeVoidAsync(
                "successToast",
                "Your harm was deleted.");
            await OnMyFeed
                .InvokeAsync(await PostService.GetMyFeedAsync(User.Id));
        }
    }
    
    private async void OpenEditCommentSection(CommentDTO comment)
    {
        await JsRuntime.InvokeVoidAsync("hideCommentDimmer");

        await OnCommentBeingEdited.InvokeAsync(comment);
    }

    private async void OpenEditReplySection(CommentDTO comment)
    {
        await JsRuntime.InvokeVoidAsync("hideCommentDimmer");
        
        await OnReplyBeingEdited.InvokeAsync(comment);
    }
    
    private async void OpenEditReplyToReplySection(CommentDTO comment)
    {
        await JsRuntime.InvokeVoidAsync("hideCommentDimmer");
        
        await OnReplyToReplyBeingEdited.InvokeAsync(comment);
    }
    
    private async Task DeleteComment(Guid commentId)
    {
        var wasRemoved = await CommentService.DeleteAsync(commentId);

        if (!wasRemoved)
            await JsRuntime.InvokeVoidAsync(
                "errorToast",
                "Something went wrong, we couldn't delete your comment.");
        else
        {
            _totalCommentCount = 0;
            var comments = await CommentService
                .GetPostCommentsAsync(PostBeingCommented!.Id);
            
            foreach (var comment in comments)
                CountCommentAndReplies(comment);
            
            var postBody = new
            {
                PostId = PostBeingCommented!.Id,
                CommentsCount = _totalCommentCount
            };
            await PostService.UpdateCommentsCountAsync(postBody);
            await JsRuntime.InvokeVoidAsync(
                "successToast",
                "Your comment was deleted.");
            await OnHarmComments
                .InvokeAsync(comments);
        }
    }
    
    private void CountCommentAndReplies(CommentDTO comment, int depth = 0)
    {
        _totalCommentCount++;
        
        if (comment.Replies != null && comment.Replies.Any())
        {
            foreach (var reply in comment.Replies)
                CountCommentAndReplies(reply, depth + 1);
        }
    }
}
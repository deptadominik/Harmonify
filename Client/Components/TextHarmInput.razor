@using Harmonify.Shared.Enums
@using Harmonify.Client.Services.Post
@using Harmonify.Shared.DTO
@using Harmonify.Client.Services.ApplicationUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime;

<form class="ui reply form">
    <div class="field">
        <textarea @oninput="HandleOnChange" placeholder="Start typing..."></textarea>
    </div>
    <div @onclick="async () => await AddPost()"
         class="ui blue labeled submit icon button"
         style="padding-left: 2.5em!important;
                    padding-right: 1em!important;">
        <i class="icon edit"></i>Publish harm
    </div>
    <div
        @onclick="InvokeDiscard"
        class="ui red labeled submit icon button"
        style="padding-left: 2.5em!important;
               padding-right: 1em!important;">
        <i class="icon window close outline"
           style="color: unset;text-shadow: unset;"></i>Discard
    </div>
    <div class="ui dimmer" id="harm-dimmer">
        <div class="content">
            <h2 class="ui inverted icon header">
                <i class="check icon"></i>
                Harm published!
            </h2>
        </div>
    </div>
</form>

@code {
    private string TextAreaValue { get; set; }

    private ApplicationUserDTO User { get; set; }

    [Parameter]
    public EventCallback<bool> OnShowTextPost { get; set; }

    [Parameter]
    public EventCallback<ICollection<PostDTO>> OnMyFeed { get; set; }

    [Parameter]
    public EventCallback<bool> OnPublish { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnDiscard { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnPostId { get; set; }

    [Parameter]
    public bool? IsImageInput { get; set; }
    
    [Parameter]
    public bool? IsAnyImageUploaded { get; set; }

    [Inject]
    public IApplicationUserService UserService { get; set; }

    [Inject]
    public IPostService PostService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();

        if (authState.User.Identity.Name != null)
        {
            User = await UserService
                .GetUserByEmailAsync(authState.User.Identity?.Name);
        }
    }

    private void HandleOnChange(ChangeEventArgs args)
    {
        TextAreaValue = args.Value.ToString();
    }

    private async Task AddPost()
    {
        if (!string.IsNullOrWhiteSpace(TextAreaValue) && (!IsImageInput ?? true))
        {
            SendRequest(type: PostType.Text);
        }
        else if (IsImageInput ?? false)
        {
            SendRequest(type: PostType.Image);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync(
                "errorToast",
                "You can't publish an empty harm!");
        }
    }

    private async void SendRequest(PostType type)
    {
        if (IsAnyImageUploaded ?? true)
        {
            var body = new
            {
                Id = Guid.NewGuid(),
                Type = type,
                Content = TextAreaValue,
                PostedAt = DateTime.Now,
                AuthorId = User.Id
            };

            var postId = await PostService.CreateAsync(body);
            
            if (postId == null)
                await JsRuntime.InvokeVoidAsync(
                    "errorToast",
                    "Post already exists!");
            else
            {
                await JsRuntime.InvokeVoidAsync("toggleDimmer");
                if (!IsImageInput ?? true)
                {
                    await OnMyFeed
                        .InvokeAsync(await PostService.GetMyFeedAsync(User.Id));
                    await Task.Delay(1000);
                    await OnShowTextPost.InvokeAsync(false);
                }
                else
                {
                    await OnPostId.InvokeAsync(postId.Value);
                    await OnPublish.InvokeAsync(true);
                }
            }
        }
        else
            await JsRuntime.InvokeVoidAsync(
                "errorToast",
                "In order to create a harm with photo(s) you need to upload any photo first!");
    }

    private async void InvokeDiscard()
    {
        if (!IsImageInput ?? true)
            await OnShowTextPost.InvokeAsync(false);
        else
            await OnDiscard.InvokeAsync(false);
    }
}